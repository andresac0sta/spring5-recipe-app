Lecture 202 view ingredients
We are going to create a new screen to show a list of ingredients of a recipe.

We are adding a new controller called the IngredientController.java tha is going to get a RecipeService  and
we are going to do constructor base injection on that

here setup the mapping and get the recipeId from the path using @PathVariable String recipeId
    @GetMapping
    @RequestMapping("/recipe/{recipeId}/ingredients")
    public String listIngredients(@PathVariable String recipeId, Model model){
        log.debug("Getting ingredient list for recipe id: " + recipeId);

        // use command object to avoid lazy load errors in Thymeleaf.
        model.addAttribute("recipe", recipeService.findCommandById(Long.valueOf(recipeId)));

        return "recipe/ingredient/list";
    }

On list.html we are going to check if that recipe's ingredient is empty or not

  <div class="table-responsive" th:if="${not #lists.isEmpty(recipe.ingredients)}">

If it is not we build out the table, all the table rows for each ingredient

    <tr th:each="ingredient : ${recipe.ingredients}">
        <td th:text="${ingredient.id}">334</td>
        <td th:text="${ingredient.amount} + ' ' + ${ingredient.uom.getDescription()} + ' ' + ${ingredient.description} + '/show'">Tasty Goodnees 3</td>
        <td><a href="#" th:href="@{'/recipe/' + ${recipe.id} + '/ingredient/' + ${ingredient.id} + '/show'}">View</a></td>
        <td><a href="#" th:href="@{'/recipe/' + ${recipe.id} + '/ingredient/' + ${ingredient.id} + '/update'}">Update</a></td>
        <td><a href="#" th:href="@{'/recipe/' + ${recipe.id} + '/ingredient/' + ${ingredient.id} + '/delete'}">Delete</a></td>
    </tr>