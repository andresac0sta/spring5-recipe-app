Lecture 204 update ingredient.

that we have with ingredient is that it  has a nested unit of measure(UOM) object

We are going to use a dropdown for that in the ingredient.html

    <div class="col-md-3 form-group">
        <label>UOM:</label>
        <select class="form-control" name="uom.id">
            <option th:each="uomEach : ${uomList}"
                    th:value="${uomEach.id}"
                    th:selected="${uomEach.id.equals(ingredient.uom.id)}"
                    th:text="${uomEach.description}">Each</option>
        </select>
    </div>

The name of the form is
      <name="uom.id">
we are passing a list of uom
    <option th:each="uomEach : ${uomList}"

And for each unit of measure we are going to give you the value of the ID so that we know which one
to get back to
    th:value="${uomEach.id}"

Then we are making sure the values from <form  th:object="${ingredient}"  and the uom match
    th:selected="${uomEach.id.equals(ingredient.uom.id)}"

In the ingredient controller when we do an update we are going to have a property called uom list and now we have
implemented a unit of measure service to go out and list all the uom

@GetMapping
    @RequestMapping("recipe/{recipeId}/ingredient/{id}/update")
    public String updateRecipeIngredient(@PathVariable String recipeId,
                                         @PathVariable String id, Model model){
        model.addAttribute("ingredient", ingredientService.findByRecipeIdAndIngredientId(Long.valueOf(recipeId), Long.valueOf(id)));

        model.addAttribute("uomList", unitOfMeasureService.listAllUoms());
        return "recipe/ingredient/ingredientform";
    }